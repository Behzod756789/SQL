


CREATE TABLE Products (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(50),
    Price DECIMAL(10,2)
);


.txt (text file)
.csv (comma-separated values)
.dat (data file)
.xml (via XML bulk load)



INSERT INTO Products (ProductID, ProductName, Price) VALUES (1, 'Laptop', 1200.00);
INSERT INTO Products (ProductID, ProductName, Price) VALUES (2, 'Mouse', 25.00);
INSERT INTO Products (ProductID, ProductName, Price) VALUES (3, 'Keyboard', 45.00);


NULL means the column can contain missing or unknown values.
NOT NULL means the column must contain a value (no blanks allowed).


ALTER TABLE Products
ADD CONSTRAINT UQ_ProductName UNIQUE (ProductName);


 This query selects all products with price above 100
SELECT * FROM Products WHERE Price > 100;


ALTER TABLE Products
ADD CategoryID INT;



CREATE TABLE Categories (
    CategoryID INT PRIMARY KEY,
    CategoryName VARCHAR(50) UNIQUE
);



An IDENTITY column auto-generates unique numbers for new rows. It helps create surrogate primary keys.


BULK INSERT Products
FROM 'C:\data\products.txt'
WITH (
    FIELDTERMINATOR = ',',
    ROWTERMINATOR = '\n',
    FIRSTROW = 2
);

ALTER TABLE Products
ADD CONSTRAINT FK_Products_Categories FOREIGN KEY (CategoryID)
REFERENCES Categories(CategoryID);

PRIMARY KEY: Unique + NOT NULL, only one per table.
UNIQUE KEY: Ensures uniqueness, allows one NULL

ALTER TABLE Products
ADD CONSTRAINT CK_Price_Positive CHECK (Price > 0);


ALTER TABLE Products
ADD Stock INT NOT NULL DEFAULT 0;


SELECT ProductID, ProductName, ISNULL(Price, 0) AS Price FROM Products;


CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    Name VARCHAR(50),
    Age INT CHECK (Age >= 18)
);


CREATE TABLE Invoice (
    InvoiceID INT IDENTITY(100,10) PRIMARY KEY,
    Total MONEY
);


CREATE TABLE OrderDetails (
    OrderID INT,
    ProductID INT,
    Quantity INT,
    PRIMARY KEY (OrderID, ProductID)
);


ISNULL(value, replacement) — SQL Server only.
COALESCE(value1, value2, ...) — Standard SQL, returns first non-null.

CREATE TABLE Employees (
    EmpID INT PRIMARY KEY,
    Name VARCHAR(50),
    Email VARCHAR(100) UNIQUE
);


CREATE TABLE Orders (
    OrderID INT PRIMARY KEY,
    CustomerID INT,
    FOREIGN KEY (CustomerID)
    REFERENCES Customers(CustomerID)
    ON DELETE CASCADE
    ON UPDATE CASCADE
);








